package app

// This file was generated by the goro tool.
// Editing this file might prove futile when you re-run the goro commands

import (
	"database/sql"
	"errors"

	"github.com/greyfox12/GoDilpom1/internal/config"
	"github.com/greyfox12/GoDilpom1/pkg/cripto"

	"go.uber.org/zap/zapcore"
)

type Logger interface {
	Debug(string, ...zapcore.Field)
	Info(string, ...zapcore.Field)
	Error(string, ...zapcore.Field)
	Fatal(string, ...zapcore.Field)
	Warn(string, ...zapcore.Field)
}

type App struct {
	cfg config.Config

	c *Container
	//	cOnce *sync.Once

	//hc     health.Checker
	//hcOnce *sync.Once

	pgsqlx *sql.DB

	logger Logger
	auth   cripto.Auth
}

var a *App

// Запуск приложения.
// Выполняю инициализацию модулей
func NewApp(configDef *config.Config) (*App, error) {
	cfg, err := config.NewConfig(configDef)
	if err != nil {
		return nil, err
	}

	app := &App{
		cfg: cfg,
	}

	app.initLogger()

	pgSqlxConn, err := app.newPgSqlxConnect(cfg.MainDB)
	if err != nil {
		return nil, err
	}
	app.pgsqlx = pgSqlxConn

	//goro:init dependencies
	app.c = NewContainer(app.pgsqlx /*, app.logger, app.cfg*/)

	app.auth = *InitCripto()

	// Миграция БД
	if err := app.c.getMigrateShema().Execute(); err != nil {
		return nil, err
	}

	return app, nil
}

func SetGlobalApp(app *App) {
	a = app
}

func GetGlobalApp() (*App, error) {
	if a == nil {
		return nil, errors.New("global app is not initialized")
	}

	return a, nil
}

func (a *App) GetConfig() config.Config {
	return a.cfg
}
